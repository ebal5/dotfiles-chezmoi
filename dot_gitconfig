[core]
	autocrlf = input
	safecrlf = warn
	quotepath = false
	pager = delta

[include]
	path = ~/.config/local/git_user_config

[alias]
	# Basic commands (基本コマンド)
	a = add
	ai = add -i
	ap = add -p
	au = add -u
	b = branch
	br = branch
	cat = cat-file
	c = commit
	cm = commit
	cam = commit --amend -m
	caum = commit --amend -am
	cmm = commit -m
	cum = commit -am
	co = checkout
	dns = diff --name-status
	s = status
	sc = sparse-checkout
	short = rev-parse --short
	ss = status
	sw = switch
	top = rev-parse --show-toplevel

	# FZF interactive commands (fzf連携コマンド)
	fsw = !git for-each-ref --format '%(refname:short)' refs/heads | fzf | xargs git switch
	fsn = !git branch --no-merged origin/master --format='%(refname:short)' | fzf | xargs git switch
	fw = !git for-each-ref --format '%(refname:short)' refs/heads | fzf | xargs git switch
	# 選択的アンステージ（複数選択可能）
	unstage = !git diff --cached --name-only | fzf -m | xargs -r git reset HEAD --

	# Push/Pull shortcuts (プッシュ・プル系ショートカット)
	pl = pull
	poh = push origin HEAD
	ps = push  # プッシュ
	psf = push --force-with-lease  # 安全な強制プッシュ
	psu = push -u origin HEAD  # upstream設定付きプッシュ

	# Fetch shortcuts (フェッチ系ショートカット)
	f = fetch  # フェッチ
	fa = fetch --all  # 全リモートフェッチ
	plo = pull origin  # originからプル
	plr = pull --rebase  # rebaseでプル

	# Diff shortcuts (差分表示ショートカット)
	d = diff  # 差分表示
	dc = diff --cached  # ステージ済み差分
	ds = diff --staged  # ステージ済み差分（dcと同じ）
	dt = difftool  # 差分ツール

	# Remote shortcuts (リモート操作ショートカット)
	r = remote  # リモート表示
	rv = remote -v  # リモート詳細表示
	ra = remote add  # リモート追加

	# Log and history (ログ・履歴表示)
	graph = log --graph --date=short --decorate=short --pretty=format:'%Cgreen%h %Creset%cd %Cblue%cn %Cred%d %Creset%s'
	l = log
	l5 = log --first-parent -n 5
	l10 = log --first-parent -n 10
	l15 = log --first-parent -n 15
	lfp = log --first-parent
	ll = log --oneline  # 1行ログ
	la = log --oneline --all  # 全ブランチ1行ログ
	lg = log --oneline --graph --all  # グラフ付き1行ログ
	today = log --since="1 day ago" --oneline  # 今日のコミット
	yesterday = log --since="2 days ago" --until="1 day ago" --oneline  # 昨日のコミット

	# Reset and cleanup (リセット・クリーンアップ)
	rh = reset --hard
	rmc = rm --cached
	rst = reset
	uncommit = reset --soft HEAD~1  # 直前コミットを取り消し（変更は保持）
	discard = checkout --  # 変更を破棄

	# Branch management (ブランチ管理)
	bd = branch -d  # ブランチ削除
	bdd = branch -D  # ブランチ強制削除
	current = rev-parse --abbrev-ref HEAD  # 現在のブランチ名取得
	upstream = !git branch --set-upstream-to=origin/$(git current)  # upstream設定

	# Workflow helpers (ワークフロー支援)
	acp = !git add -A && git commit -m  # 全追加してコミット
	acps = !f() { git add -A && git commit -m "$1" && git push origin HEAD; }; f  # 全追加・コミット・プッシュ
	sync = !git pull origin main && git push origin HEAD  # main同期してプッシュ

	# Information display (情報表示)
	aliases = config --get-regexp alias  # エイリアス一覧表示
	last = log -1 HEAD  # 最後のコミット表示
	size = count-objects -vH  # リポジトリサイズ表示
	files = diff --name-only  # 変更ファイル名のみ表示

	# Advanced FZF integration (高度なfzf連携)
	fco = !git branch --all | grep -v HEAD | sed 's|^[* ] ||' | sed 's|remotes/origin/||' | sort -u | fzf | xargs git checkout  # fzfでブランチ選択・チェックアウト
	flog = !git log --oneline | fzf | awk '{print $1}' | xargs git show  # fzfでコミット選択・表示

	# Stash management (stash管理)
	wip = stash
	wipl = stash list
	wips = stash push
	wipp = stash pop
	save = !git add -A && git commit -m 'WIP: savepoint'  # WIP保存

	# Tree and listing (ツリー・一覧表示)
	lt = ls-tree

	# Cleanup utilities (クリーンアップユーティリティ)
	clean-branches = !git branch --merged | grep -v '\\*\\|main\\|master' | xargs -n 1 git branch -d  # マージ済みブランチ削除

	# Review helpers (レビュー支援)
	review = !git log --reverse HEAD~$1..HEAD --oneline  # 指定数のコミットをレビュー用に表示

[merge]
	ff = false

[pull]
	ff = only

[init]
	defaultBranch = main

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[interactive]
	diffFilter = delta --color-only

[delta]
  navigate = true
 	line-numbers = true

[merge]
  conflictstyle = diff3

[diff]
  colorMoved = default
